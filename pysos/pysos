#!/usr/bin/env python
# 
# 
# pysos written by Jake Hunsaker <jhunsaker@redhat.com>
# rhevlcbridge library  and get_rhevm_info() written by Wallace Daniel
#
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#
from __future__ import division
from itertools import groupby
from collections import defaultdict
from rhevlcbridge import *
import os, argparse, textwrap, re, datetime, time, math, tempfile, subprocess, tarfile, string
from opsys import *
from rhev import *
from kernel import *
from network import *
from storage import *

# switches
parser = argparse.ArgumentParser(description='Make a sosreport pretty.')
parser.add_argument('target', nargs='+', help='Target directory, aka the sosreport root. Use "/" to run locally')
parser.add_argument('-a', "--getall", action="store_true", help='Print all information (RHEV excluded)')
parser.add_argument('-b', "--bios", action="store_true", help='Print BIOS and dmidecode information')
parser.add_argument('-o', "--os", action="store_true", help='Prints OS information')
parser.add_argument('-k', "--kdump", action="store_true", help="Prints kdump information")
parser.add_argument('-c', "--cpu", action="store_true", help='Print CPU information ONLY')
parser.add_argument('-m', "--memory", action="store_true", help='Prints memory information')
parser.add_argument('-d', "--disk", action="store_true", help='Print /proc/partition information')
parser.add_argument('-l', "--lspci", action="store_true", help='Print lspci information')
parser.add_argument('-e', '--ethtool', action="store_true", help='Prints ethtool information')
parser.add_argument('-g', "--bonding", action="store_true", help='Print bonding information')
parser.add_argument('-i', "--ip", action="store_true", help='Print IP information')
parser.add_argument('-n', "--netdev", action="store_true", help='Print proc/net/dev information')
parser.add_argument("--net", action="store_true", help='Alias for --ethtool, --bonding, --ip, --netdev')
parser.add_argument('-s', "--sysctl", action="store_true", help='Print all sysctl information')
parser.add_argument('-p', "--ps", action="store_true", help='Print ps information')
parser.add_argument("--check", help='Check package for known bugs')

parser.add_argument('-t', "--test", action="store_true")

parser.add_argument('-r', "--rhev", action="store_true", help='Print RHEV Information')
parser.add_argument("--db", action="store_true", help = 'Print RHEV DB information')


args = parser.parse_args()

class colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    SECTION = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    WHITE = '\033[1;37m'
    GREY = '\033[37m'
    HEADER_BOLD = '\033[95m' + '\033[1m'
    WARN = '\033[33m'
    PURPLE = '\033[35m'
    CYAN = '\033[36m'
    DBLUE = '\033[34m'



def check_installed(target, rpm):
	print colors.SECTION + 'Package Check' + colors.ENDC
	print ''
	
	if not os.path.isfile(target + 'installed-rpms'):
		print colors.RED + colors.BOLD + '\t Installed RPMs file not found' + colors.ENDC
		return False
	
	if rpm == 'all':
		with open(target + 'installed-rpms', 'r') as rfile:
			for line in rfile:
				ver = line.split()[0]
				package = check_rpm_ver(ver, all_test=True)
				if package:
					print '\t' + colors.RED + colors.BOLD +' {:10} : '.format(ver) + colors.ENDC +' {:20}'.format(package[0]) \
					+ colors.WHITE + '  KCS :' + colors.ENDC +' {:7}'.format(package[1]) + colors.WHITE + '  BZ :' + colors.ENDC \
					+' {:7}'.format(package[2])
	else:
		with open(target + 'installed-rpms', 'r') as rfile:
			for line in rfile:
				if rpm in line:
					ver = line.split()[0]
					package = check_rpm_ver(ver, stand_alone=True)
					if type(package) is list:
						print '\t' + colors.RED + colors.BOLD +'{:10} : '.format(ver) + colors.ENDC +' {:20}'.format(package[0]) \
					+ colors.WHITE + '  KCS :' + colors.ENDC +' {:7}'.format(package[1]) + colors.WHITE + '  BZ :' + colors.ENDC \
					+' {:7}'.format(package[2])
					else:
						print '\t' + colors.BLUE + ver + colors.ENDC + ' : %s' % package		
				
def graphit(perc):
	
	# general graphing function, needs to be fed a percentage. 
	tick = u"\u25C6"
	empty = u"\u25C7"	
	filled = round(40 * (perc / 100))
	nofill = 40 - filled
	percf = '%.2f' %perc + ' %'
	graph = tick * int(filled) + empty * int(nofill) + '  %7s' %percf
	return graph
			
					
def get_rhev_info(target, check_db=False):

	# logic to determine hyp/manager
	rhevm = find_rpm(target, 'rhevm')
	if 'not' in rhevm:
		manager = False
	else:
		manager = True
	if manager:
		get_rhevm_info(target, check_db)
	else:
		rhevh.get_rhev_hyp_info(target)


def get_main(**kwargs):
	if kwargs['getall']:
		kwargs['os'] = True
		kwargs['memory'] = True
		kwargs['kdump'] = True
		kwargs['cpu'] = True
		kwargs['sysctl'] = True
		kwargs['ip'] = True
		kwargs['bonding'] = True
		kwargs['netdev']= True
		kwargs['ethtool'] = True
		kwargs['bios'] = True
		kwargs['disk'] = True
	if kwargs['net']:
		kwargs['ip'] = True
		kwargs['bonding'] = True
		kwargs['eth'] = True
		kwargs['netdev'] = True
	if kwargs['os']:
		get_os_info(target, local)
	if kwargs['memory']:
		get_mem_info(target)
	if  kwargs['bios']:
		get_bios_info(target, local)
	if  kwargs['kdump']:
		get_kernel_info(target, local)
	if  kwargs['cpu']:
		get_cpu_info(target)
	if  kwargs['sysctl']:
		get_sysctl_info(target)
	if  kwargs['ip']:
		get_ip_info(target, local)
	if  kwargs['bonding']:
		get_bonding_info(target)
	if  kwargs['ethtool']:
		get_ethtool_info(target)
	if  kwargs['netdev']:
		get_netdev_info(target)
	if  kwargs['lspci']:
		get_lspci_info(target, local)
	if  kwargs['rhev']:
		if kwargs['db']:
			get_rhev_info(target, db=True)
		else:
			get_rhev_info(target)
	if  kwargs['disk']:
		get_storage_info(target, local)
	if  kwargs['ps']:
		get_ps_info(target)
	if  kwargs['check']:
		check_installed(target, kwargs['check'])
	
target = args.target[0]
if target == '/':
	local = True
else:
	local = False
if not target.endswith('/'):
	target = target + '/'	

get_main(**vars(args))
