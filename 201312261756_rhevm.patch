--- xsos.py	2013-12-26 17:52:38.392856499 -0500
+++ xsos.py.orig	2013-12-26 16:44:12.112998364 -0500
@@ -4,21 +4,21 @@
 # xsos Python re-write by Jake Hunsaker <jake@redhat.com>
 #
 # ---> yes, my Python probably makes any other programmer's eyes bleed
-#	  I am well aware of this
+#      I am well aware of this
 #
 #
-#	This program is free software: you can redistribute it and/or modify
-#	it under the terms of the GNU General Public License as published by
-#	the Free Software Foundation, either version 3 of the License, or
-#	(at your option) any later version.
+#    This program is free software: you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation, either version 3 of the License, or
+#    (at your option) any later version.
 #
-#	This program is distributed in the hope that it will be useful,
-#	but WITHOUT ANY WARRANTY; without even the implied warranty of
-#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
-#	General Public License <gnu.org/licenses/gpl.html> for more details.
+#    This program is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+#    General Public License <gnu.org/licenses/gpl.html> for more details.
 #
 from __future__ import division
-import os, argparse, textwrap, re, datetime, time, logging, tarfile
+import os, argparse, textwrap, re, datetime, time
 
 
 # switches
@@ -31,7 +31,6 @@
 parser.add_argument('-s', "--sysctl", action="store_true", help='Print all sysctl information')
 parser.add_argument('-i', "--ip", action="store_true", help='Print IP information')
 parser.add_argument('-g', "--bonding", action="store_true", help='Print bonding information')
-parser.add_argument('-r', "--rhev", action="store_true", help='Print RHEV Information')
 
 args = parser.parse_args()
 
@@ -53,19 +52,19 @@
 # Define colors - yay color!
 # Need more - build out later
 class colors:
-	HEADER = '\033[95m'
-	BLUE = '\033[94m'
-	GREEN = '\033[92m'
-	SECTION = '\033[93m'
-	RED = '\033[91m'
-	ENDC = '\033[0m'
-	BOLD = '\033[1m'
-	WHITE = '\033[37m'
-	HEADER_BOLD = '\033[95m' + '\033[1m'
-	WARN = '\033[33m'
-	PURPLE = '\033[35m'
-	CYAN = '\033[36m'
-	
+    HEADER = '\033[95m'
+    BLUE = '\033[94m'
+    GREEN = '\033[92m'
+    SECTION = '\033[93m'
+    RED = '\033[91m'
+    ENDC = '\033[0m'
+    BOLD = '\033[1m'
+    WHITE = '\033[37m'
+    HEADER_BOLD = '\033[95m' + '\033[1m'
+    WARN = '\033[33m'
+    PURPLE = '\033[35m'
+    CYAN = '\033[36m'
+    
 def find_rpm(target, rpm):
 	# from here we will pull specific targets for installed RPMS
 	rpm_state = False
@@ -240,18 +239,18 @@
 	print colors.HEADER_BOLD + '\t Runlevel  : ' + colors.ENDC + statuses['runlevel']
 	print colors.HEADER_BOLD +  '\t SELinux   : ' + colors.ENDC + selstate
 	
-	print colors.HEADER_BOLD + '\t Kernel	: ' + colors.ENDC
+	print colors.HEADER_BOLD + '\t Kernel    : ' + colors.ENDC
 	print '\t   ' + colors.BLUE + colors.BOLD + 'Booted kernel  : ' + colors.ENDC + str(statuses['kernel']).split(" ")[2]
 	print '\t   ' + colors.BLUE + colors.BOLD + 'GRUB default   : '
 	print '\t   ' + colors.BLUE + colors.BOLD + 'Booted cmdline : ' + colors.ENDC
 	print '%15s' % ' ' + textwrap.fill(statuses['cmdline'], subsequent_indent='%15s' % ' ')
-	print '\t   ' + colors.BLUE + colors.BOLD + 'Taint-check	: ' + colors.ENDC + str(tainted)
+	print '\t   ' + colors.BLUE + colors.BOLD + 'Taint-check    : ' + colors.ENDC + str(tainted)
 	
 	print colors.GREEN + '%9s' % ' ' + colors.BOLD + '~ ' * 20 + colors.ENDC
 	
 	print colors.HEADER_BOLD  + '\t Sys time  : ' + colors.ENDC + statuses['systime']
 	print colors.HEADER_BOLD  + '\t Boot time : ' + colors.ENDC + boottime
-	print colors.HEADER_BOLD + '\t Uptime	: ' + colors.ENDC + uptime
+	print colors.HEADER_BOLD + '\t Uptime    : ' + colors.ENDC + uptime
 	print colors.HEADER_BOLD + '\t Load Avg  : ' + colors.WHITE +'[%s CPUs] ' %(num_cpus) + colors.ENDC \
 	 + loadavg
 	print colors.HEADER_BOLD + '\t /proc/stat: ' + colors.ENDC
@@ -322,12 +321,12 @@
 	# print this all pretty
 	print colors.SECTION + colors.BOLD + "Memory " + colors.ENDC
 	print colors.HEADER + colors.BOLD + '\t Memory Statistics graphed : ' + colors.ENDC
-	print colors.BLUE + '\t\t Used	  : %8.2f GB ' %(used_mem / 1024) + usedgraph + colors.ENDC 
+	print colors.BLUE + '\t\t Used      : %8.2f GB ' %(used_mem / 1024) + usedgraph + colors.ENDC 
 	print colors.PURPLE + '\t\t Buffered  : %8.2f GB ' %(buffered_mem / 1024) + buffergraph + colors.ENDC
-	print colors.CYAN + '\t\t Cached	: %8.2f GB ' %(cached_mem / 1024) + cachedgraph + colors.ENDC
+	print colors.CYAN + '\t\t Cached    : %8.2f GB ' %(cached_mem / 1024) + cachedgraph + colors.ENDC
 	print colors.GREEN + '\t\t Hugepages : %8s MB ' %hugepages + hugepagegraph + colors.ENDC
-	print colors.RED + '\t\t Dirty	 : %8s MB ' %dirty_mem + dirtygraph + colors.ENDC
-	print colors.WHITE + '\t\t SLAB	  : %8s MB ' %slab + slabgraph + colors.ENDC
+	print colors.RED + '\t\t Dirty     : %8s MB ' %dirty_mem + dirtygraph + colors.ENDC
+	print colors.WHITE + '\t\t SLAB      : %8s MB ' %slab + slabgraph + colors.ENDC
 
 	print colors.HEADER + colors.BOLD + '\t RAM  :' + colors.ENDC
 	print '\t\t %6.2f GB total RAM on system' %(int(total_mem) / 1024)
@@ -413,13 +412,13 @@
 	print colors.SECTION + colors.BOLD + 'Kdump ' + colors.ENDC
 	print colors.HEADER_BOLD + '\t kexec-tools version : ' + colors.ENDC + kexec_ver
 	print colors.HEADER_BOLD + '\t Service enablement  : ' + colors.ENDC + kdump_status
-	print colors.HEADER_BOLD + '\t kdump initrd.img	: ' + colors.ENDC + initrd
+	print colors.HEADER_BOLD + '\t kdump initrd.img    : ' + colors.ENDC + initrd
 	print colors.HEADER_BOLD + '\t Memory Reservation  : ' + colors.ENDC
 	print colors.BLUE + colors.BOLD + '\t\t kernel arg   : ' + colors.ENDC + state
-	print colors.BLUE + colors.BOLD + '\t\t GRUB conf	: ' + colors.ENDC
-	print colors.HEADER_BOLD + '\t kdump.conf		  : ' + colors.ENDC
+	print colors.BLUE + colors.BOLD + '\t\t GRUB conf    : ' + colors.ENDC
+	print colors.HEADER_BOLD + '\t kdump.conf          : ' + colors.ENDC
 	for item in config:
-		print '\t\t\t		%s' %item
+		print '\t\t\t        %s' %item
 	print colors.BLUE + colors.BOLD + '\t\t path mount   : ' + colors.ENDC + mount_at
 	print colors.BLUE + colors.BOLD + '\t\t avail space  : ' + colors.ENDC + size		
 	print colors.HEADER_BOLD + '\t Kernel Panic sysctl : ' + colors.ENDC
@@ -539,7 +538,7 @@
 					ip_ints[name] = [device,ipaddr,slaveof,hwaddr]	
 	
 	print colors.SECTION + colors.BOLD + 'IP ' + colors.ENDC
-	print colors.WHITE + '\t {:^15}		{:^20}	  {:^11}   {:^25}'.format('INT','IP ADDR', 'MEMBER OF','HW ADDR') + colors.ENDC
+	print colors.WHITE + '\t {:^15}        {:^20}      {:^11}   {:^25}'.format('INT','IP ADDR', 'MEMBER OF','HW ADDR') + colors.ENDC
 	print '\t' + '=' * 16 + ' ' * 6 + '=' * 23 + ' ' * 4 + '=' * 13 + ' ' * 5 + '=' * 19
 	for key in sorted(ip_ints):
 		value = ip_ints[key]
@@ -615,11 +614,11 @@
 				bond_devs[name] = (bond_mode, bond_opts, phys_devs, hw_addrs)
 			
 	print colors.SECTION + colors.BOLD + 'Bonding' + colors.ENDC
-	print colors.WHITE + '\t {:^10}	{:^20}   {:^30}   {:^34}'.format('Device', 'Mode', 'BONDING_OPTS', 'Slave Interfaces')
+	print colors.WHITE + '\t {:^10}    {:^20}   {:^30}   {:^34}'.format('Device', 'Mode', 'BONDING_OPTS', 'Slave Interfaces')
 	print '\t ' + '=' * 10 + '\t' + '=' * 19 + '\t  ' + '=' * 21 + '\t\t   ' + '=' * 26 + colors.ENDC
 	for item in sorted(bond_devs):
 		value = bond_devs[item]
-		print colors.GREEN + '\t {:<10}'.format(item) + colors.ENDC + '	 {:^20}'.format(value[0]) + '\t  {:<26}'.format(value[1]) + '{:>14} {:<18}'.format(value[2][0], value[3][0])
+		print colors.GREEN + '\t {:<10}'.format(item) + colors.ENDC + '     {:^20}'.format(value[0]) + '\t  {:<26}'.format(value[1]) + '{:>14} {:<18}'.format(value[2][0], value[3][0])
 		dev_count = 1
 		for each in value[2]:
 			try: 
@@ -629,167 +628,18 @@
 			except:
 				print colors.PURPLE + '\t' * 10 + '   ' + '- ' * 10 + colors.ENDC
 
-def get_rhev_info(target):
-	# grab / print basic information first
-	print ""
-	print colors.SECTION + colors.BOLD + "RHEV Information"
-	print colors.SECTION + colors.BOLD + "----------------"
-	print ""
-
-	# Find RHEVM rpm
-	rhevm_ver = find_rpm(target, "rhevm-3")
-	print colors.PURPLE + "Version: " + colors.GREEN + rhevm_ver
-	
-	# Find simplified version for debug purposes
-	if "-3.0" in rhevm_ver:
-		simpleVer = "3.0"
-	elif "-3.1" in rhevm_ver:
-		simpleVer = "3.1"
-	elif "-3.2" in rhevm_ver:
-		simpleVer = "3.2"
-	else:
-		simpleVer = "Could not be found"
-		
-	#logging.warning('Found the simplified version of rpm: ' + simpleVer) 
-	
-	# Try to find database
-	database = False
-	fullPath = os.path.abspath(target)
-	
-	#logging.warning('Using the following as fullpath variable: ' + fullPath)
-	lcRoot = os.path.dirname(fullPath)
-	
-	#logging.warning('Using the following as lcRoot variable: ' + lcRoot)
-	if os.path.isdir(lcRoot + "/database"):
-		database = True
-		dbDir = lcRoot + "/database"
-		
-	# The following is only possible if we found the db above
-	if database:
-		print colors.PURPLE + "Database: " + colors.GREEN +"Database: Located"
-		
-		# Compensate for 3.0 / 3.x database differences
-		if simpleVer == "3.1" or simpleVer == "3.2":
-			# Eval manager before moving on to db analysis
-			rhev_eval_mngr(dbDir)
-		elif simpleVer == "3.0":
-			print colors.WARN + "Not ready to parse 3.0 databases yet"
-		else:
-			print colors.WARN + simpleVer
-		
-		# Move on to the database
-		rhev_eval_db(dbDir)
-		
-	else:
-		print colors.WARN + "Database not found"
-		
-		# Eval manager even without the database being found
-		print ""
-		rhev_eval_mngr(target)
-	
-	
-# Method for evaulating the manager regardless of whether or not we find the database	
-# This method should expect to receive the original target path, that is, path to sosreport of manager
-def rhev_eval_mngr(target):
-	#logging.warning('rhev_eval_mngr has been called, beginning eval...')
-	print ""
-	
-# Method for evaluating the database for env information
-# This method should expect to be passed the directory containing the database
-def rhev_eval_db(dbDir):
-	#logging.warning('rhev_eval_db has been called, beginning eval...')
-	
-	if os.path.exists(dbDir + "/sos_pgdump.tar"):
-		dbTar = dbDir + "/sos_pgdump.tar"
-		#logging.warning('Found dbdump: ' + dbTar)
-		
-		#extract tar file
-		dbdump = tarfile.open(dbTar)
-		dbdump.extractall(dbDir+"/")
-		dbdump.close()
-		
-		# find relevant dat files for DCs, domains, and hosts in the database directory
-		dc_dat = dbDir + "/" + findDat(" storage_pool ", dbDir + "/restore.sql")
-		#logging.warning('Found dc_dat: ' + dc_dat)
-		domain_dat = dbDir + "/" + findDat(" storage_domain_static ", dbDir + "/restore.sql")
-		#logging.warning('Found domain_dat: ' + domain_dat)
-		host_dat = dbDir + "/" + findDat(" vds_static ", dbDir + "/restore.sql")
-		#logging.warning('Found host_dat: ' + host_dat)
-		
-		##
-		# Find all DCs and store in list
-		##
-		
-		dc_list = []
-		theFile = open(dc_dat,"r")
-		lines = theFile.readlines()
-		
-		for n in lines:
-			vals = n.split()
-			if len(vals) >= 2:
-				#print vals[1] + " - " + vals[0]
-				dc_uuid = vals[0]
-				dc_name = vals[1]
-				# this if statement compenstates for environments where the "Default" dc and it's description have been left in place.
-				if dc_name == "Default":
-					dc_compat = vals[11]
-				else:
-					dc_compat = vals[9]
-					
-				#logging.warning(dc_name +","+dc_uuid+","+dc_compat)
-				newDC = dc_name+","+dc_uuid+","+dc_compat
-				#logging.warning("Newest DC is: " + newDC)
-				
-				dc_list.append(newDC)
-		
-		#Print data center list
-		#headerStr = '%2s '+ colors.BLUE + '%3s %4s %5s %6s' % ("Data Center Name","|","UUID","|","Compatibility Version")
-		print'%2s %3s %4s %5s %6s' % ("Data Center Name","|","UUID","|","Compatibility Version")
-		for d in dc_list:
-			dc_details = d.split(",")
-			print'%2s %3s %4s %5s %6s' % (dc_details[0],"|",dc_details[1],"|",dc_details[2])
-			
-		print colors.ENDC
-				
-	
-	else:
-		print colors.WARN + "Could not find a database file"
-		
-# Finds relevant files after dbdump has been extracted
-def findDat(table,restFile):
-	'''
-	Subroutine to find the dat file name in restore.sql
-	''' 
-	openFile = open(restFile, "r")
-	lines = openFile.readlines()
-	
-	# print "Looking for " + table
-	
-	for n in lines:
-		if n.find(table) != -1:
-			if n.find("dat") != -1:
-				datInd = n.find("PATH")
-				datFileName =  n[datInd+7:datInd+15]
-				if datFileName.endswith("dat"):
-					#print "Found dat line for " + table
-					#logging.warning('Return dat file: ' +datFileName)
-					return datFileName
-	
-	return -1
-
-
 #def getoffset(offset, v1, v2):
 #	return offset + (len(v2) - len(v1))
 
-#def format_color(data):																																										
-#  if 'eth' in data:																																											
-#	return '\033[94m' + data																																								  
-#  elif 'vlan' in data:																																										
-#	return '\033[95m' + data																																								  
-#  else:																																														
-#	return '\033[0m' + data   
-	
-def get_main(os, mem, kdump, cpu, sysctl, ip, bonding, rhev, target):
+#def format_color(data):                                                                                                                                                                        
+#  if 'eth' in data:                                                                                                                                                                            
+#    return '\033[94m' + data                                                                                                                                                                  
+#  elif 'vlan' in data:                                                                                                                                                                        
+#    return '\033[95m' + data                                                                                                                                                                  
+#  else:                                                                                                                                                                                        
+#    return '\033[0m' + data   
+    
+def get_main(os, mem, kdump, cpu, sysctl, ip, bonding, target):
 	if os:
 		get_os_info(target)
 	if mem:
@@ -804,11 +654,9 @@
 		get_ip_info(target)
 	if bonding:
 		get_bonding_info(target)
-	if rhev:
-		get_rhev_info(target)
 			
 target = args.target[0]
 if not target.endswith('/'):
 	target = target + '/'
 
-get_main(args.os, args.memory, args.kdump, args.cpu, args.sysctl, args.ip, args.bonding, args.rhev, target)
+get_main(args.os, args.memory, args.kdump, args.cpu, args.sysctl, args.ip, args.bonding, target)
